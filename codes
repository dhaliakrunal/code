package com.example.jsonreader.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class JsonReaderService {

    private final RestTemplate restTemplate;

    @Value("${api.url}")
    private String apiUrl;

    @Value("${api.token}")
    private String token;

    public JsonReaderService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public void fetchDataFromApi() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", token);
            headers.setAccept(MediaType.parseMediaTypes("application/json"));

            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    apiUrl,
                    HttpMethod.GET,
                    entity,
                    String.class
            );

            System.out.println("==== API RESPONSE ====");
            System.out.println(response.getBody());

        } catch (Exception e) {
            System.out.println("Error during API call: " + e.getMessage());
            e.printStackTrace();
        }
    }
}





package com.example.jsonreader;

import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.service.JsonReaderService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(JsonFileProperties.class)
public class JsonReaderApplication implements CommandLineRunner {

    private final JsonReaderService jsonReaderService;

    public JsonReaderApplication(JsonReaderService jsonReaderService) {
        this.jsonReaderService = jsonReaderService;
    }

    public static void main(String[] args) {
        SpringApplication.run(JsonReaderApplication.class, args);
    }

    @Override
    public void run(String... args) {
        jsonReaderService.fetchDataFromApi();
    }
}






package com.example.jsonreader.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;

@Getter
@Setter
@ConfigurationProperties(prefix = "json")
public class JsonFileProperties {
    private String entitiesPath;
    private String kycPath;
    private String outputPath;
}






<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>4.5.13</version>
</dependency>





package com.example.jsonreader.controller;

import com.example.jsonreader.service.JsonReaderService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class JsonReaderController {

    private final JsonReaderService jsonReaderService;

    public JsonReaderController(JsonReaderService jsonReaderService) {
        this.jsonReaderService = jsonReaderService;
    }

    @GetMapping("/fetch")
    public ResponseEntity<String> fetchData() {
        try {
            String response = jsonReaderService.fetchDataFromApi();
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity
                    .status(500)
                    .body("Error occurred: " + e.getMessage());
        }
    }
}





public String fetchDataFromApi() {
    try {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", token);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                apiUrl,
                HttpMethod.GET,
                entity,
                String.class
        );

        return response.getBody();
    } catch (Exception e) {
        e.printStackTrace();
        throw new RuntimeException("API fetch failed: " + e.getMessage());
    }
}
