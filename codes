private final List<KycDetails> mergedData = new ArrayList<>();

public void loadAndMergeData() {
    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);

        // Read entities.json
        InputStream entityStream = new ClassPathResource("entities.json").getInputStream();
        EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);

        // Read kyc_details.json
        InputStream kycStream = new ClassPathResource("kyc_details.json").getInputStream();
        KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);

        // Build kyc map
        Map<Integer, KycDetails> kycMap = kycWrapper.getResults().stream()
                .filter(k -> k.getKycId() != null)
                .collect(Collectors.toMap(KycDetails::getKycId, k -> k));

        entityResponse.getResults().stream()
                .map(Wrapper::getEntity)
                .filter(entity -> entity.getIdentifiers() != null && entity.getIdentifiers().getKycId() != null)
                .map(entity -> {
                    Integer kycId = entity.getIdentifiers().getKycId();
                    KycDetails match = kycMap.get(kycId);
                    if (match != null) {
                        match.setIdentifiers(entity.getIdentifiers());
                        return match;
                    }
                    return null;
                })
                .filter(Objects::nonNull)
                .forEach(mergedData::add);

        if (mergedData.isEmpty()) {
            System.out.println("❌ No matching KYC records found.");
        } else {
            mergedData.forEach(kyc -> {
                System.out.println("➡ identifiers: " + kyc.getIdentifiers());
                if (kyc.getKycSegment() != null) System.out.println("   kycSegment: " + kyc.getKycSegment());
                if (kyc.getKycSite() != null) System.out.println("   kycSite: " + kyc.getKycSite());
                if (kyc.getRiskIndustry() != null) System.out.println("   riskIndustry: " + kyc.getRiskIndustry());
                System.out.println("------------------------------------------------");
            });
        }

        File output = new File("src/main/resources/output/merged_output.json");
        output.getParentFile().mkdirs();
        mapper.writerWithDefaultPrettyPrinter().writeValue(output, mergedData);

    } catch (Exception e) {
        System.err.println("❌ Error processing: " + e.getMessage());
        e.printStackTrace();
    }
}

public List<KycDetails> getMergedData() {
    return mergedData;
}



package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.InputStream;
import java.util.*;
import java.util.stream.Collectors;
