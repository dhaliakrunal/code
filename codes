@Service
public class MergeService {

    @Autowired
    private RestTemplate restTemplate;

    public List<MergedOutput> fetchAndMergeData() {
        // Call API 1
        String api1Url = "http://localhost:8080/api/entities"; // Replace with actual URL
        ResponseEntity<EntityData[]> response1 = restTemplate.getForEntity(api1Url, EntityData[].class);
        List<EntityData> entityList = Arrays.asList(response1.getBody());

        // Call API 2
        String api2Url = "http://localhost:8080/api/kyc-details"; // Replace with actual URL
        ResponseEntity<KycDetails[]> response2 = restTemplate.getForEntity(api2Url, KycDetails[].class);
        List<KycDetails> kycList = Arrays.asList(response2.getBody());

        // Merge using kycId
        List<MergedOutput> mergedList = new ArrayList<>();

        for (EntityData entity : entityList) {
            for (Identifiers entityId : entity.getIdentifiers()) {
                Long kycId = entityId.getKycId();

                for (KycDetails kyc : kycList) {
                    for (Identifiers kycIdObj : kyc.getIdentifiers()) {
                        if (kycId.equals(kycIdObj.getKycId())) {
                            MergedOutput merged = new MergedOutput();
                            merged.setIdentifiers(entity.getIdentifiers());
                            merged.setBusinessGroup(entity.getBusinessGroup());

                            if (kyc.getKycData() != null) {
                                merged.setKycSegment(kyc.getKycData().getKycSegment());
                                merged.setKycSite(kyc.getKycData().getKycSite());
                                merged.setKycRiskIndustry(kyc.getKycData().getKycRiskIndustry());
                            }

                            mergedList.add(merged);
                        }
                    }
                }
            }
        }

        return mergedList;
    }
}





@RestController
@RequestMapping("/api/merged")
public class MergeController {

    @Autowired
    private MergeService mergeService;

    @GetMapping
    public ResponseEntity<List<MergedOutput>> getMergedData() {
        List<MergedOutput> result = mergeService.fetchAndMergeData();
        return ResponseEntity.ok(result);
    }
}
