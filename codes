package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

csharp
Copy
Edit
private final List<MergedOutput> mergedResults = new ArrayList<>();

public List<MergedOutput> mergeAndDisplayData() {
    mergedResults.clear(); // Ensure it's fresh every call

    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        // Read entities.json
        InputStream entityStream = new ClassPathResource("data/entities.json").getInputStream();
        EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);
        List<Wrapper> entityList = entityResponse.getResults();

        // Read kycDetails.json
        InputStream kycStream = new ClassPathResource("data/kycDetails.json").getInputStream();
        KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);
        List<KycDetails> kycList = kycWrapper.getResults();

        // Merge using forEach + stream + List only
        entityList.forEach(wrapper -> {
            EntityData entityData = wrapper.getEntity();
            List<Identifiers> entityIdentifiers = entityData.getIdentifiers();

            if (entityIdentifiers != null && !entityIdentifiers.isEmpty()) {
                entityIdentifiers.forEach(eid -> {
                    kycList.stream()
                            .filter(kyc -> kyc.getIdentifiers() != null)
                            .filter(kyc -> kyc.getIdentifiers().stream().anyMatch(kid -> kid.getKycId().equals(eid.getKycId())))
                            .findFirst()
                            .ifPresent(matchedKyc -> {
                                MergedOutput output = new MergedOutput();
                                output.setIdentifiers(entityIdentifiers);
                                output.setBusinessGroup(wrapper.getBusinessGroup());
                                output.setKycSegment(matchedKyc.getKycSegment());
                                output.setKycSite(matchedKyc.getKycSite());
                                output.setKycRiskIndustry(matchedKyc.getKycRiskIndustry());

                                mergedResults.add(output);
                            });
                });
            }
        });

        // Print to console
        mergedResults.forEach(output -> {
            System.out.println("\n==== Merged Output ====");
            output.getIdentifiers().forEach(id -> {
                System.out.println("ptyId: " + id.getPtyId());
                System.out.println("crdsCode: " + id.getCrdsCode());
                System.out.println("kycId: " + id.getKycId());
            });

            if (output.getBusinessGroup() != null) {
                System.out.println("--- Business Group ---");
                output.getBusinessGroup().forEach((k, v) -> System.out.println(k + ": " + v));
            }

            System.out.println("--- KYC Segment ---");
            System.out.println(output.getKycSegment());

            if (output.getKycSite() != null) {
                System.out.println("--- KYC Site ---");
                output.getKycSite().forEach(site -> System.out.println(site.toString()));
            }

            if (output.getKycRiskIndustry() != null) {
                System.out.println("--- Risk Industry ---");
                output.getKycRiskIndustry().forEach(risk -> System.out.println(risk.toString()));
            }

            System.out.println("=====================");
        });

        // ✅ Save to file
        mapper.writerWithDefaultPrettyPrinter()
              .writeValue(new File("merged_output.json"), mergedResults);

        System.out.println("\n✅ Merged data written to merged_output.json");

    } catch (Exception e) {
        System.err.println("❌ Error during merging: " + e.getMessage());
        e.printStackTrace();
    }

    return mergedResults;
}
}
