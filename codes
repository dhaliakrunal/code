package com.sunscreening.jsonreader.service;

import com.sunscreening.jsonreader.model.MergedOutput;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CSVReportService {

    private final JsonReaderService jsonReaderService;

    public void generateCsvReport(String filePath) throws IOException {
        List<MergedOutput> mergedList = jsonReaderService.mergeAndDisplayData();

        try (FileWriter writer = new FileWriter(filePath)) {
            // Write header
            writer.write("crdsCode;bnppSite;siteCountry;siteStatus;kycSegment;riskIndustryCode;riskIndustryDesc;regLine1;regLine2;regCity;regState;regCountry\n");

            for (MergedOutput item : mergedList) {
                String crdsCode = item.getIdentifiers() != null && !item.getIdentifiers().isEmpty()
                        ? item.getIdentifiers().get(0).getCrdsCode() : "";
                String site = item.getKycSite() != null ? item.getKycSite().getBnppSite() : "";
                String siteCountry = item.getKycSite() != null ? item.getKycSite().getCountry() : "";
                String siteStatus = item.getKycSite() != null ? item.getKycSite().getStatus() : "";
                String kycSegment = item.getKycSegment() != null ? item.getKycSegment() : "";
                String riskCode = item.getKycRiskIndustry() != null ? item.getKycRiskIndustry().getCode() : "";
                String riskDesc = item.getKycRiskIndustry() != null ? item.getKycRiskIndustry().getDescription() : "";

                String line1 = item.getRegistrationAddress() != null ? item.getRegistrationAddress().getLine1() : "";
                String line2 = item.getRegistrationAddress() != null ? item.getRegistrationAddress().getLine2() : "";
                String city = item.getRegistrationAddress() != null ? item.getRegistrationAddress().getCity() : "";
                String state = item.getRegistrationAddress() != null ? item.getRegistrationAddress().getState() : "";
                String country = item.getRegistrationAddress() != null ? item.getRegistrationAddress().getCountry() : "";

                writer.write(
                    crdsCode + ";" + site + ";" + siteCountry + ";" + siteStatus + ";" +
                    kycSegment + ";" + riskCode + ";" + riskDesc + ";" +
                    line1 + ";" + line2 + ";" + city + ";" + state + ";" + country + "\n"
                );
            }
        }
    }
}










package com.sunscreening.jsonreader.controller;

import com.sunscreening.jsonreader.service.CSVReportService;
import com.sunscreening.jsonreader.service.JsonReaderService;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class EntityController {

    private final JsonReaderService jsonReaderService;
    private final CSVReportService csvReportService;

    @GetMapping("/kyc-details")
    public ResponseEntity<?> getMergedOutput() {
        return ResponseEntity.ok(jsonReaderService.mergeAndDisplayData());
    }

    @GetMapping("/download/csv")
    public ResponseEntity<Resource> downloadCsv() {
        try {
            // Generate CSV file
            String filePath = "src/main/resources/merged_report.csv";
            csvReportService.generateCsvReport(filePath);

            // Prepare the file for download
            File file = new File(filePath);
            if (!file.exists()) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(null);
            }

            InputStreamResource resource = new InputStreamResource(new FileInputStream(file));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentDisposition(ContentDisposition.builder("attachment")
                    .filename("merged_report.csv")
                    .build());
            headers.setContentType(MediaType.parseMediaType("text/csv"));

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(file.length())
                    .body(resource);

        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .build();
        }
    }
}





package org.example.util;

import org.example.model.*;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CsvExportUtil {

    public static void exportToCsv(List<MergedEntity> mergedEntities, String filePath) {
        try (FileWriter writer = new FileWriter(filePath)) {

            // Write CSV Header
            writer.write("CRS CODE;Reg Address;Reg Address Country;Site BNPP;Site Country;Site Status;KYC Segment;RIC\n");

            for (MergedEntity entity : mergedEntities) {
                StringBuilder line = new StringBuilder();

                // CRS CODE
                String crsCode = Optional.ofNullable(entity.getIdentifiers())
                        .map(Identifiers::getCrdsCode)
                        .orElse("");
                line.append(crsCode).append(";");

                // Reg Address (Line1 + Line2 + City + State + Zipcode)
                RegistrationAddress regAddr = entity.getRegistrationAddress();
                String fullAddress = "";
                String country = "";

                if (regAddr != null) {
                    fullAddress = String.join(" ",
                            Optional.ofNullable(regAddr.getLine1()).orElse(""),
                            Optional.ofNullable(regAddr.getLine2()).orElse(""),
                            Optional.ofNullable(regAddr.getCity()).orElse(""),
                            Optional.ofNullable(regAddr.getState()).orElse(""),
                            Optional.ofNullable(regAddr.getZipCode()).orElse("") // ✅ Method must be named getZipCode()
                    ).trim();

                    country = Optional.ofNullable(regAddr.getCountry()).orElse("");
                }

                line.append(fullAddress).append(";");
                line.append(country).append(";");

                // KYC Sites (only first one)
                List<KycSites> sites = entity.getKycSites();
                String siteBnpp = "", siteCountry = "", siteStatus = "";

                if (sites != null && !sites.isEmpty()) {
                    KycSites site = sites.get(0);
                    siteBnpp = Optional.ofNullable(site.getSiteBnpP()).orElse("");     // ✅ Method must exist
                    siteCountry = Optional.ofNullable(site.getSiteCountry()).orElse(""); // ✅ Method must exist
                    siteStatus = Optional.ofNullable(site.getSiteStatus()).orElse("");   // ✅ Method must exist
                }

                line.append(siteBnpp).append(";");
                line.append(siteCountry).append(";");
                line.append(siteStatus).append(";");

                // KYC Segment
                String segment = Optional.ofNullable(entity.getKycSegments()).orElse("");
                line.append(segment).append(";");

                // RIC (Risk Industry CODE-DESCRIPTION joined by "|")
                String ric = "";
                List<RiskIndustry> risks = entity.getRiskIndustry();
                if (risks != null && !risks.isEmpty()) {
                    ric = risks.stream()
                            .map(r -> r.getRiskIndustryCode() + "-" + r.getRiskIndustryDescription())
                            .collect(Collectors.joining("|"));
                }

                line.append(ric).append("\n");
                writer.write(line.toString());
            }

            writer.flush();
            System.out.println("CSV exported to: " + filePath);

        } catch (IOException e) {
            System.err.println("CSV export failed: " + e.getMessage());
            e.printStackTrace(); // Consider replacing with proper logger if needed
        }
    }
}
