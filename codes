package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiProperties;
import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class JsonReaderService {

    private final JsonFileProperties properties;
    private final ApiProperties apiProperties;
    private final RestTemplate restTemplate;

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            // üîê 1. Get Access Token
            String accessToken = fetchAccessToken();

            // üåê 2. Prepare Headers
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(accessToken);
            headers.setAccept(List.of(MediaType.APPLICATION_JSON));
            headers.add("Accept", "*/*;version=gamma");

            HttpEntity<Void> request = new HttpEntity<>(headers);

            // üì° 3. Call Entity API
            ResponseEntity<String> entityResponseRaw = restTemplate.exchange(
                    apiProperties.getEntitiesUrl(),
                    HttpMethod.GET,
                    request,
                    String.class
            );
            EntityResponse entityResponse = mapper.readValue(entityResponseRaw.getBody(), EntityResponse.class);
            List<Wrapper> wrappers = entityResponse.getResults();

            // üì° 4. Call KYC API
            ResponseEntity<String> kycResponseRaw = restTemplate.exchange(
                    apiProperties.getKycUrl(),
                    HttpMethod.GET,
                    request,
                    String.class
            );
            KycDetailsWrapper kycWrapper = mapper.readValue(kycResponseRaw.getBody(), KycDetailsWrapper.class);
            List<KycDetails> kycDetailsList = kycWrapper.getResults();

            // üîÅ 5. Merge Data
            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getPtyId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getPtyId() != null && kid.getPtyId().equals(entityId.getPtyId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            // üíæ 6. Save to file
            mapper.writerWithDefaultPrettyPrinter().writeValue(new File(properties.getOutputPath()), mergedResults);
            System.out.println("‚úÖ Merged output written to: " + properties.getOutputPath());

            // üñ®Ô∏è 7. Print to console
            String prettyJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mergedResults);
            System.out.println(prettyJson);

        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedResults;
    }

    private String fetchAccessToken() throws Exception {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));

        String body = "grant_type=" + apiProperties.getGrantType() +
                      "&client_id=" + apiProperties.getClientId();

        HttpEntity<String> request = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.exchange(
                apiProperties.getTokenUrl(),
                HttpMethod.POST,
                request,
                String.class
        );

        if (response.getStatusCode() == HttpStatus.OK) {
            JsonNode json = new ObjectMapper().readTree(response.getBody());
            return json.get("access_token").asText();
        }

        throw new RuntimeException("‚ùå Failed to fetch access token: " + response.getStatusCode());
    }
}


# API URLs
api.entities-url=https://api.example.com/entities
api.kyc-url=https://api.example.com/kycDetails

# Access Token
api.access-token=your_actual_access_token_here

# Output file path
json.output-path=src/main/resources/merged_output.json



package com.example.jsonreader.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "api")
@Getter
@Setter
public class ApiProperties {
    private String entitiesUrl;
    private String kycUrl;
    private String accessToken;
}





package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiProperties;
import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

    private final JsonFileProperties properties;
    private final RestTemplate restTemplate;
    private final ApiProperties apiProperties;

    @Autowired
    public JsonReaderService(JsonFileProperties properties,
                              RestTemplate restTemplate,
                              ApiProperties apiProperties) {
        this.properties = properties;
        this.restTemplate = restTemplate;
        this.apiProperties = apiProperties;
    }

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", "Bearer " + apiProperties.getAccessToken());

            HttpEntity<Void> request = new HttpEntity<>(headers);

            // 1. Fetch from API
            ResponseEntity<EntityResponse> entityResponse =
                    restTemplate.exchange(apiProperties.getEntitiesUrl(), HttpMethod.GET, request, EntityResponse.class);
            List<Wrapper> wrappers = entityResponse.getBody().getResults();

            ResponseEntity<KycDetailsWrapper> kycResponse =
                    restTemplate.exchange(apiProperties.getKycUrl(), HttpMethod.GET, request, KycDetailsWrapper.class);
            List<KycDetails> kycDetailsList = kycResponse.getBody().getResults();

            // 2. Merge logic
            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getKycId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getKycId() != null && kid.getKycId().equals(entityId.getKycId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            mapper.writerWithDefaultPrettyPrinter().writeValue(new File(properties.getOutputPath()), mergedResults);
            System.out.println("‚úÖ Merged output written to: " + properties.getOutputPath());
            mergedResults.forEach(System.out::println);

        } catch (Exception e) {
            System.err.println("‚ùå Error during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedResults;
    }
}




@SpringBootApplication
@EnableConfigurationProperties({JsonFileProperties.class, ApiProperties.class})
public class JsonReaderApplication {
    public static void main(String[] args) {
        SpringApplication.run(JsonReaderApplication.class, args);
    }
}




package com.example.jsonreader.controller;

import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.service.JsonReaderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class EntityController {

    private final JsonReaderService jsonReaderService;

    @Autowired
    public EntityController(JsonReaderService jsonReaderService) {
        this.jsonReaderService = jsonReaderService;
    }

    @GetMapping("/merged-data")
    public List<MergedOutput> getMergedData() {
        return jsonReaderService.mergeAndDisplayData();
    }
}



package com.example.jsonreader.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "json")
@Getter
@Setter
public class JsonFileProperties {

    private String outputPath; // Example: src/main/resources/merged_output.json
}



package com.example.jsonreader.config;

import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() throws Exception {
        TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;

        SSLContext sslContext = SSLContextBuilder
                .create()
                .loadTrustMaterial(null, acceptingTrustStrategy)
                .build();

        HttpClient httpClient = HttpClients.custom()
                .setSSLContext(sslContext)
                .build();

        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);

        return new RestTemplate(factory);
    }
}




package com.example.jsonreader.config;

import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() throws Exception {
        SSLContext sslContext = SSLContextBuilder
                .create()
                .loadTrustMaterial(null, new TrustSelfSignedStrategy())
                .build();

        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLContext(sslContext)
                .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
                .build();

        HttpComponentsClientHttpRequestFactory factory =
                new HttpComponentsClientHttpRequestFactory(httpClient);

        return new RestTemplate(factory);
    }
}





package com.example.jsonreader.config;

import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.*;
import java.security.cert.X509Certificate;
import java.time.Duration;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) throws Exception {
        // Trust ALL certificates
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public void checkClientTrusted(X509Certificate[] certs, String authType) {}
                public void checkServerTrusted(X509Certificate[] certs, String authType) {}
                public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }
            }
        };

        // Create SSL context that uses our trust manager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

        // Set up hostname verifier to allow all hosts
        HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        return builder
                .setConnectTimeout(Duration.ofSeconds(10))
                .setReadTimeout(Duration.ofSeconds(20))
                .build();
    }
}





package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiProperties;
import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

    private final JsonFileProperties properties;
    private final ApiProperties apiProperties;
    private final RestTemplate restTemplate;

    public JsonReaderService(JsonFileProperties properties, ApiProperties apiProperties, RestTemplate restTemplate) {
        this.properties = properties;
        this.apiProperties = apiProperties;
        this.restTemplate = restTemplate;
    }

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            // --- 1. Prepare headers with token ---
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(apiProperties.getAccessToken());
            headers.setAccept(List.of(MediaType.APPLICATION_JSON));

            HttpEntity<Void> request = new HttpEntity<>(headers);

            // --- 2. Fetch Entity API (as byte[]) ---
            ResponseEntity<byte[]> entityResponseRaw = restTemplate.exchange(
                    apiProperties.getEntitiesUrl(),
                    HttpMethod.GET,
                    request,
                    byte[].class
            );
            EntityResponse entityResponse = mapper.readValue(entityResponseRaw.getBody(), EntityResponse.class);

            // --- 3. Fetch KYC API (as byte[]) ---
            ResponseEntity<byte[]> kycResponseRaw = restTemplate.exchange(
                    apiProperties.getKycUrl(),
                    HttpMethod.GET,
                    request,
                    byte[].class
            );
            KycDetailsWrapper kycWrapper = mapper.readValue(kycResponseRaw.getBody(), KycDetailsWrapper.class);

            // --- 4. Extract results ---
            List<Wrapper> wrappers = entityResponse.getResults();
            List<KycDetails> kycDetailsList = kycWrapper.getResults();

            // --- 5. Merge logic ---
            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getKycId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getKycId() != null && kid.getKycId().equals(entityId.getKycId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            // --- 6. Write to file ---
            mapper.writerWithDefaultPrettyPrinter().writeValue(new File(properties.getOutputPath()), mergedResults);
            System.out.println("‚úÖ Merged output written to: " + properties.getOutputPath());

            // --- 7. Optional: Print raw response for debugging ---
            // System.out.println("Raw Entity Response: " + new String(entityResponseRaw.getBody(), StandardCharsets.UTF_8));
            // System.out.println("Raw KYC Response: " + new String(kycResponseRaw.getBody(), StandardCharsets.UTF_8));

        } catch (Exception e) {
            System.err.println("‚ùå Error during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedResults;
    }
}






// --- 6. Write to file ---
mapper.writerWithDefaultPrettyPrinter().writeValue(new File(properties.getOutputPath()), mergedResults);
System.out.println("‚úÖ Merged output written to: " + properties.getOutputPath());

// --- 7. Print merged results to console in pretty JSON ---
System.out.println("‚úÖ Final Merged Output:");
String prettyJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mergedResults);
System.out.println(prettyJson);















KycDetailsWrapper kycWrapper = mapper.readValue(kycResponseRaw.getBody(), KycDetailsWrapper.class);
System.out.println("‚úÖ KYC Entries Loaded: " + kycWrapper.getResults().size());

// Add this to inspect 1st record's kycSegment
System.out.println("üîç First kycSegment: " +
    (kycWrapper.getResults().get(0).getKycData() != null
        ? kycWrapper.getResults().get(0).getKycData().getKycSegment()
        : "kycData is null")
);





















package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

    @Value("${api.entity-url}")
    private String entityApiUrl;

    @Value("${api.kyc-url}")
    private String kycApiUrl;

    @Value("${api.token}")
    private String accessToken;

    @Value("${api.output-path}")
    private String outputPath;

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    public JsonReaderService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
        this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            // Set up headers with Authorization
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", "Bearer " + accessToken);
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> request = new HttpEntity<>(headers);

            // Fetch Entity API
            ResponseEntity<EntityResponse> entityResponse = restTemplate.exchange(
                    entityApiUrl, HttpMethod.GET, request, EntityResponse.class);

            List<Wrapper> wrappers = entityResponse.getBody().getResults();

            // Fetch KYC API
            ResponseEntity<KycDetailsWrapper> kycResponse = restTemplate.exchange(
                    kycApiUrl, HttpMethod.GET, request, KycDetailsWrapper.class);

            List<KycDetails> kycDetailsList = kycResponse.getBody().getResults();

            // Merge logic using Stream
            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getKycId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getKycId() != null &&
                                                    kid.getKycId().equals(entityId.getKycId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            // Write to file
            mapper.writerWithDefaultPrettyPrinter().writeValue(new File(outputPath), mergedResults);
            System.out.println("‚úÖ Merged output written to: " + outputPath);

            // Print
            mergedResults.forEach(System.out::println);

        } catch (Exception e) {
            System.err.println("‚ùå Error during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedResults;
    }
}








System.out.println("---- KYC Details List Dump ----");
for (KycDetails kd : kycDetailsList) {
    System.out.println("‚úÖ identifiers: " + kd.getIdentifiers());
    if (kd.getKycData() != null) {
        System.out.println("üîπ segment: " + kd.getKycData().getKycSegment());
        System.out.println("üîπ site: " + kd.getKycData().getKycSite());
        System.out.println("üîπ risk: " + kd.getKycData().getRiskIndustry());
    } else {
        System.out.println("‚ùå kycData is null");
    }
}


package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiProperties;
import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

    private final JsonFileProperties properties;
    private final ApiProperties apiProperties;
    private final RestTemplate restTemplate;

    public JsonReaderService(JsonFileProperties properties, ApiProperties apiProperties, RestTemplate restTemplate) {
        this.properties = properties;
        this.apiProperties = apiProperties;
        this.restTemplate = restTemplate;
    }

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            // Prepare headers
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(apiProperties.getAccessToken());
            headers.setAccept(List.of(MediaType.APPLICATION_JSON));
            HttpEntity<Void> request = new HttpEntity<>(headers);

            // Fetch Entity API
            ResponseEntity<byte[]> entityResp = restTemplate.exchange(
                    apiProperties.getEntitiesUrl(), HttpMethod.GET, request, byte[].class);
            EntityResponse entityResponse = mapper.readValue(entityResp.getBody(), EntityResponse.class);

            // Fetch KYC API
            ResponseEntity<byte[]> kycResp = restTemplate.exchange(
                    apiProperties.getKycUrl(), HttpMethod.GET, request, byte[].class);
            KycDetailsWrapper kycWrapper = mapper.readValue(kycResp.getBody(), KycDetailsWrapper.class);

            List<Wrapper> wrappers = entityResponse.getResults();
            List<KycDetails> kycDetailsList = kycWrapper.getResults();

            // Merge by ptyId
            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getPtyId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getPtyId() != null &&
                                                    kid.getPtyId().equals(entityId.getPtyId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            // Save to file
            mapper.writerWithDefaultPrettyPrinter()
                  .writeValue(new File(properties.getOutputPath()), mergedResults);

            System.out.println("‚úÖ Merged output written to: " + properties.getOutputPath());

            // Optional log for verification
            mergedResults.forEach(result -> {
                System.out.println("üëâ ptyId Match:");
                if (result.getIdentifiers() != null) {
                    result.getIdentifiers().forEach(id -> System.out.println("   ptyId = " + id.getPtyId()));
                }
                System.out.println("   Segment = " + result.getKycSegment());
                System.out.println("   RiskIndustry = " + result.getKycRiskIndustry());
            });

        } catch (Exception e) {
            System.err.println("‚ùå Error during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedResults;
    }
}












System.out.println("üëâ kyc.getKycData(): " + mapper.writeValueAsString(kyc.getKycData()));
ObjectMapper mapper = new ObjectMapper();
System.out.println("Raw JSON for first KYC: " + mapper.writeValueAsString(kycDetailsList.get(0)));
System.out.println("Parsed kycData: " + mapper.writeValueAsString(kycDetailsList.get(0).getKycData()));









auth.token-url=https://your-auth-server.com/oauth/token
auth.grant-type=client_credentials
auth.client-id=your-client-id


// ApiAuthProperties.java
package com.example.jsonreader.config;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Data
@Component
@ConfigurationProperties(prefix = "auth")
public class ApiAuthProperties {
    private String tokenUrl;
    private String grantType;
    private String clientId;
}



// TokenService.java
package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiAuthProperties;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.LinkedHashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class TokenService {

    private final ApiAuthProperties authProperties;
    private final RestTemplate restTemplate;

    public String getAccessToken() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));

        // Only client_id and grant_type
        Map<String, String> params = new LinkedHashMap<>();
        params.put("grant_type", authProperties.getGrantType());
        params.put("client_id", authProperties.getClientId());

        // Convert map to url-encoded string
        StringBuilder bodyBuilder = new StringBuilder();
        for (Map.Entry<String, String> entry : params.entrySet()) {
            if (bodyBuilder.length() > 0) bodyBuilder.append("&");
            bodyBuilder.append(entry.getKey()).append("=").append(entry.getValue());
        }

        HttpEntity<String> request = new HttpEntity<>(bodyBuilder.toString(), headers);

        ResponseEntity<String> response = restTemplate.exchange(
                authProperties.getTokenUrl(),
                HttpMethod.POST,
                request,
                String.class
        );

        if (response.getStatusCode() == HttpStatus.OK) {
            try {
                JsonNode json = new ObjectMapper().readTree(response.getBody());
                return json.get("access_token").asText(); // ‚úÖ or adjust if it's wrapped/nested
            } catch (Exception e) {
                throw new RuntimeException("‚ùå Error parsing token response: " + e.getMessage(), e);
            }
        }

        throw new RuntimeException("‚ùå Token request failed: " + response.getStatusCodeValue());
    }
}



headers.setBearerAuth(tokenService.getAccessToken());




@Service
@RequiredArgsConstructor
public class TokenService {

    private final ApiAuthProperties authProperties;
    private final RestTemplate restTemplate;

    public String getAccessToken() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));

        String body = "grant_type=" + authProperties.getGrantType()
                    + "&client_id=" + authProperties.getClientId();

        HttpEntity<String> request = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.exchange(
                authProperties.getTokenUrl(),
                HttpMethod.POST,
                request,
                String.class
        );

        // Extract access_token from response
        return new ObjectMapper()
                .readTree(response.getBody())
                .get("access_token").asText();
    }
}

