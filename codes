package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

pgsql
Copy
Edit
public List<MergedOutput> mergeAndDisplayData() {
    List<MergedOutput> mergedResults = new ArrayList<>();

    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);

        InputStream entityStream = new ClassPathResource("data/entities.json").getInputStream();
        InputStream kycStream = new ClassPathResource("data/kycDetails.json").getInputStream();

        EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);
        KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);

        List<Wrapper> entityList = entityResponse.getResults();
        List<KycDetails> kycList = kycWrapper.getResults();

        for (Wrapper wrapper : entityList) {
            List<Identifiers> entityIds = wrapper.getEntity().getIdentifiers();
            if (entityIds != null && !entityIds.isEmpty()) {
                for (Identifiers eid : entityIds) {
                    for (KycDetails kyc : kycList) {
                        if (kyc.getIdentifiers() != null) {
                            for (Identifiers kid : kyc.getIdentifiers()) {
                                if (eid.getKycId().equals(kid.getKycId())) {
                                    MergedOutput output = new MergedOutput();
                                    output.setIdentifiers(List.of(eid));
                                    output.setBusinessGroup(wrapper.getBusinessGroup());
                                    output.setKycSegment(kyc.getKycSegment());
                                    output.setKycSite(kyc.getKycSite());
                                    output.setKycRiskIndustry(kyc.getKycRiskIndustry());
                                    mergedResults.add(output);
                                }
                            }
                        }
                    }
                }
            }
        }

        // Print to console
        mergedResults.forEach(output -> {
            System.out.println("\n===== Merged Output =====");
            if (output.getIdentifiers() != null) {
                output.getIdentifiers().forEach(id ->
                        System.out.printf("ptyId: %s, crdsCode: %s, kycId: %s%n",
                                id.getPtyId(), id.getCrdsCode(), id.getKycId()));
            }
            if (output.getBusinessGroup() != null) {
                System.out.println("Business Group: " + output.getBusinessGroup().getName());
            }
            if (output.getKycSegment() != null) {
                System.out.println("KYC Segment: " + output.getKycSegment());
            }
            if (output.getKycSite() != null) {
                output.getKycSite().forEach(site ->
                        System.out.println("Site Entity: " + site.getSiteEntity()));
            }
            if (output.getKycRiskIndustry() != null) {
                output.getKycRiskIndustry().forEach(risk ->
                        System.out.println("Risk Industry: " + risk.getRiskIndustryDescription()));
            }
        });

        // Save to JSON file
        mapper.writeValue(new File("merged_output.json"), mergedResults);

    } catch (Exception e) {
        e.printStackTrace();
    }

    return mergedResults;
}
}
