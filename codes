public List<MergedOutput> mergeAndDisplayData() {
    List<MergedOutput> mergedResults = new ArrayList<>();

    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        // Read entities.json
        InputStream entityStream = new ClassPathResource("data/entities.json").getInputStream();
        EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);
        List<Wrapper> wrappers = entityResponse.getResults();

        // Read kycDetails.json
        InputStream kycStream = new ClassPathResource("data/kycDetails.json").getInputStream();
        KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);
        List<KycDetails> kycDetailsList = kycWrapper.getResults();

        wrappers.stream()
            .filter(w -> w.getEntity() != null && w.getEntity().getIdentifiers() != null)
            .forEach(wrapper -> {
                List<Identifiers> entityIds = wrapper.getEntity().getIdentifiers();

                entityIds.stream()
                    .filter(eid -> eid.getKycId() != null)
                    .forEach(entityId -> {

                        kycDetailsList.stream()
                            .filter(k -> k.getIdentifiers() != null)
                            .forEach(kyc -> {
                                kyc.getIdentifiers().stream()
                                    .filter(kid -> kid.getKycId() != null &&
                                        Objects.equals(kid.getKycId(), entityId.getKycId()))
                                    .findFirst()
                                    .ifPresent(match -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(entityIds);
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        // Avoid duplicates
                                        mergedResults.add(output);

                                        // Print to console
                                        System.out.println("\n==== Merged Record ====");
                                        System.out.println("--- Identifiers ---");
                                        entityIds.forEach(id -> {
                                            System.out.println("ptyId: " + id.getPtyId());
                                            System.out.println("crdsCode: " + id.getCrdsCode());
                                            System.out.println("kycId: " + id.getKycId());
                                        });

                                        System.out.println("\n--- Business Group ---");
                                        if (wrapper.getBusinessGroup() != null) {
                                            wrapper.getBusinessGroup().forEach((k, v) -> System.out.println(k + ": " + v));
                                        }

                                        if (kyc.getKycData() != null) {
                                            System.out.println("\n--- KYC Segment ---");
                                            System.out.println(kyc.getKycData().getKycSegment());

                                            System.out.println("\n--- KYC Site ---");
                                            if (kyc.getKycData().getKycSite() != null) {
                                                kyc.getKycData().getKycSite().forEach(System.out::println);
                                            }

                                            System.out.println("\n--- Risk Industry ---");
                                            if (kyc.getKycData().getRiskIndustry() != null) {
                                                kyc.getKycData().getRiskIndustry().forEach(System.out::println);
                                            }
                                        }
                                        System.out.println("========================");
                                    });
                            });
                    });
            });

        // Save to merged_output.json
        mapper.writerWithDefaultPrettyPrinter().writeValue(new File("merged_output.json"), mergedResults);
        System.out.println("\n✅ Merged output written to merged_output.json");

    } catch (Exception e) {
        System.err.println("❌ Error during merging: " + e.getMessage());
        e.printStackTrace();
    }

    return mergedResults;
}
