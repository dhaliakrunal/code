package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.*;

@Service
public class JsonReaderService {

    public void mergeAndDisplayData() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            // Read entity JSON
            InputStream entityStream = new ClassPathResource("data/entities.json").getInputStream();
            EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);

            // Read KYC JSON
            InputStream kycStream = new ClassPathResource("data/kycDetails.json").getInputStream();
            KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);

            List<Wrapper> entities = entityResponse.getResults();
            List<KycDetails> kycDetailsList = kycWrapper.getResults();

            // Create a map of kycId â†’ KycDetails
            Map<Integer, KycDetails> kycMap = new HashMap<>();
            for (KycDetails kyc : kycDetailsList) {
                if (kyc.getIdentifiers() != null && !kyc.getIdentifiers().isEmpty()) {
                    Integer kycId = kyc.getIdentifiers().get(0).getKycId();
                    kycMap.put(kycId, kyc);
                }
            }

            // Merge and display
            for (Wrapper wrapper : entities) {
                EntityData entity = wrapper.getEntity();
                List<Identifiers> identifiersList = (List<Identifiers>) entity.getIdentifiers().get("identifiers");

                if (identifiersList != null && !identifiersList.isEmpty()) {
                    Integer kycId = identifiersList.get(0).getKycId();

                    if (kycMap.containsKey(kycId)) {
                        KycDetails kyc = kycMap.get(kycId);

                        System.out.println("\n==== Merged Record ====");
                        System.out.println("--- Identifiers ---");
                        for (Identifiers id : identifiersList) {
                            System.out.println("ptyId: " + id.getPtyId());
                            System.out.println("crdsCode: " + id.getCrdsCode());
                            System.out.println("kycId: " + id.getKycId());
                        }

                        System.out.println("\n--- Business Group ---");
                        wrapper.getBusinessGroup().forEach((k, v) -> System.out.println(k + ": " + v));

                        System.out.println("\n--- KYC Segment ---");
                        System.out.println(kyc.getKycSegment());

                        System.out.println("\n--- KYC Site ---");
                        if (kyc.getKycSite() != null) {
                            kyc.getKycSite().forEach(site ->
                                    System.out.println("Site: " + site.toString()));
                        }

                        System.out.println("\n--- Risk Industry ---");
                        if (kyc.getKycRiskIndustry() != null) {
                            kyc.getKycRiskIndustry().forEach(risk ->
                                    System.out.println("Risk: " + risk.toString()));
                        }

                        System.out.println("========================");
                    }
                }
            }

        } catch (Exception e) {
            System.err.println("Error during merging: " + e.getMessage());
            e.printStackTrace();
        }
    }
}





BusinessGroup bg = wrapper.getBusinessGroup();
if (bg != null) {
    System.out.println("businessGroupCode: " + bg.getBusinessGroupCode());
    System.out.println("name: " + bg.getName());
    System.out.println("businessCountry: " + bg.getBusinessCountry());
    System.out.println("responsibleEntityCode: " + bg.getResponsibleEntityCode());
    System.out.println("responsibleEntityName: " + bg.getResponsibleEntityName());
    System.out.println("coverage: " + bg.getCoverage());
    System.out.println("lastUpdatedDate: " + bg.getLastUpdatedDate());
} else {
    System.out.println("No business group data");
}
