✅ 1. KycData.java (New POJO to reflect nested structure)

package com.example.jsonreader.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Data;

import java.util.List;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class KycData {
private String kycSegment;
private List<KycSite> kycSite;
private List<KycRiskIndustry> riskIndustry;
}

✅ 2. KycDetails.java (Updated to include KycData)

package com.example.jsonreader.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Data;

import java.util.List;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class KycDetails {
private List<Identifiers> identifiers;
private KycData kycData;
}

✅ 3. MergedOutput.java (Updated to match new structure)

package com.example.jsonreader.model;

import lombok.Data;

import java.util.List;

@Data
public class MergedOutput {
private List<Identifiers> identifiers;
private BusinessGroup businessGroup;
private String kycSegment;
private List<KycSite> kycSite;
private List<KycRiskIndustry> kycRiskIndustry;
}

✅ 4. JsonReaderService.java (Updated logic to extract from kycData)

package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

pgsql
Copy
Edit
public List<MergedOutput> mergeAndDisplayData() {
    List<MergedOutput> mergedResults = new ArrayList<>();

    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        // Read entities.json
        InputStream entityStream = new ClassPathResource("data/entities.json").getInputStream();
        EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);
        List<Wrapper> wrappers = entityResponse.getResults();

        // Read kycDetails.json
        InputStream kycStream = new ClassPathResource("data/kycDetails.json").getInputStream();
        KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);
        List<KycDetails> kycDetailsList = kycWrapper.getResults();

        for (Wrapper wrapper : wrappers) {
            List<Identifiers> entityIdentifiers = wrapper.getEntity().getIdentifiers();

            for (Identifiers entityId : entityIdentifiers) {
                for (KycDetails kyc : kycDetailsList) {
                    if (kyc.getIdentifiers() != null) {
                        for (Identifiers kycId : kyc.getIdentifiers()) {
                            if (kycId.getKycId() != null && kycId.getKycId().equals(entityId.getKycId())) {
                                MergedOutput output = new MergedOutput();
                                output.setIdentifiers(entityIdentifiers);
                                output.setBusinessGroup(wrapper.getBusinessGroup());

                                if (kyc.getKycData() != null) {
                                    output.setKycSegment(kyc.getKycData().getKycSegment());
                                    output.setKycSite(kyc.getKycData().getKycSite());
                                    output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                }

                                mergedResults.add(output);
                                break;
                            }
                        }
                    }
                }
            }
        }

        // Save to merged_output.json
        mapper.writerWithDefaultPrettyPrinter().writeValue(new File("merged_output.json"), mergedResults);
        System.out.println("Merged output written to merged_output.json");

    } catch (Exception e) {
        System.err.println("Error during merging: " + e.getMessage());
        e.printStackTrace();
    }

    return mergedResults;
}
}
