package com.example.jsonreader.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MergedOutputEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String crdsCode;
    private String bnppSite;
    private String siteCountry;
    private String siteStatus;
    private String kycSegment;
    private String riskIndustry;
    private String registrationAddress;
    private String registrationCountry;
}






package com.example.jsonreader.repository;

import com.example.jsonreader.entity.MergedOutputEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MergedOutputRepository extends JpaRepository<MergedOutputEntity, Long> {
}




package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entityList = mergedData.stream()
                .map(data -> MergedOutputEntity.builder()
                        .crdsCode(data.getCrdsCode())
                        .bnppSite(data.getBnppSite())
                        .siteCountry(data.getSiteCountry())
                        .siteStatus(data.getSiteStatus())
                        .kycSegment(data.getKycSegment())
                        .riskIndustry(data.getRiskIndustry())
                        .registrationAddress(data.getRegistrationAddress())
                        .registrationCountry(data.getRegistrationCountry())
                        .build())
                .toList();

        repository.saveAll(entityList);
    }
}



@GetMapping("/api/save")
public ResponseEntity<String> mergeAndSaveToDatabase() {
    List<MergedOutput> mergedData = jsonReaderService.mergeAndDisplayData();
    mergedOutputPersistenceService.saveToH2Database(mergedData);
    return ResponseEntity.ok("Merged data saved to H2 database successfully.");
}



package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.Identifiers;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entityList = mergedData.stream()
                .map(data -> {
                    Identifiers firstIdentifier = data.getIdentifiers() != null && !data.getIdentifiers().isEmpty()
                            ? data.getIdentifiers().get(0)
                            : new Identifiers();

                    return MergedOutputEntity.builder()
                            .crdsCode(firstIdentifier.getCrdsCode())
                            .bnppSite(firstIdentifier.getBnppSite())
                            .siteCountry(firstIdentifier.getSiteCountry())
                            .siteStatus(firstIdentifier.getSiteStatus())
                            .registrationAddress(firstIdentifier.getRegistrationAddress())
                            .registrationCountry(firstIdentifier.getRegistrationCountry())
                            .kycSegment(data.getKycSegment())
                            .riskIndustry(data.getRiskIndustry())
                            .build();
                })
                .toList();

        repository.saveAll(entityList);
    }
}



package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.Identifiers;
import com.example.jsonreader.model.KycSite;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entityList = mergedData.stream()
                .map(data -> {
                    Identifiers firstIdentifier = data.getIdentifiers() != null && !data.getIdentifiers().isEmpty()
                            ? data.getIdentifiers().get(0)
                            : new Identifiers();

                    String registrationAddress = firstIdentifier.getRegistrationAddress() != null
                            ? firstIdentifier.getRegistrationAddress().getFullAddress()
                            : null;

                    String registrationCountry = firstIdentifier.getRegistrationAddress() != null
                            ? firstIdentifier.getRegistrationAddress().getCountry()
                            : null;

                    KycSite kycSite = data.getKycSite();

                    return MergedOutputEntity.builder()
                            .crdsCode(firstIdentifier.getCrdsCode())
                            .registrationAddress(registrationAddress)
                            .registrationCountry(registrationCountry)
                            .bnppSite(kycSite != null ? kycSite.getBnppSite() : null)
                            .siteCountry(kycSite != null ? kycSite.getSiteCountry() : null)
                            .siteStatus(kycSite != null ? kycSite.getSiteStatus() : null)
                            .kycSegment(data.getKycSegment())
                            .riskIndustry(data.getRiskIndustry())
                            .build();
                })
                .toList();

        repository.saveAll(entityList);
    }
}



RegistrationAddress address = data.getRegistrationAddress() != null && !data.getRegistrationAddress().isEmpty()
    ? data.getRegistrationAddress().get(0)
    : new RegistrationAddress();





public class MergedService {

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedEntity> entities = mergedData.stream()
            .map(data -> {

                Identifiers firstIdentifier = (data.getIdentifiers() != null && !data.getIdentifiers().isEmpty())
                        ? data.getIdentifiers().get(0)
                        : new Identifiers();

                RegistrationAddress address = data.getRegistrationAddress();

                KycSite kycSite = (data.getKycSite() != null && !data.getKycSite().isEmpty())
                        ? data.getKycSite().get(0)
                        : null;

                return MergedEntity.builder()
                        .crdsCode(firstIdentifier.getCrdsCode())
                        .registrationAddress(address != null ? String.valueOf(address.getRegistrationAddress()) : null)
                        .registrationCountry(address != null ? address.getCountry() : null)
                        .bnppSite(kycSite != null ? kycSite.getSiteBnppEntity() : null)
                        .siteCountry(kycSite != null ? kycSite.getSiteCountry() : null)
                        .siteStatus(kycSite != null ? kycSite.getSiteStatus() : null)
                        .kycSegment(data.getKycSegment())
                        .riskIndustry(String.valueOf(data.getKycRiskIndustry()))
                        .build();
            })
            .toList();

        // Save to DB using your repository
        mergedRepo.saveAll(entities);
    }
}






return MergedEntity.builder()
                        .crdsCode(firstIdentifier != null ? defaultIfNull(firstIdentifier.getCrdsCode()) : "")
                        .registrationAddress(regAddress != null ? defaultIfNull(regAddress.getRegistrationAddress()) : "")
                        .registrationCountry(regAddress != null ? defaultIfNull(regAddress.getCountry()) : "")
                        .bnppSite(firstKycSite != null ? defaultIfNull(firstKycSite.getSiteBnppEntity()) : "")
                        .siteCountry(firstKycSite != null ? defaultIfNull(firstKycSite.getSiteCountry()) : "")
                        .siteStatus(firstKycSite != null ? defaultIfNull(firstKycSite.getSiteStatus()) : "")
                        .kycSegment(defaultIfNull(data.getKycSegment()))
                        .riskIndustry(data.getKycRiskIndustry() != null
                                ? defaultIfNull(data.getKycRiskIndustry().getCode()) + "-" + defaultIfNull(data.getKycRiskIndustry().getDescription())
                                : "")
                        .build();
