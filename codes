package com.sunscreening.jsonreader.entity;

import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;

import static org.junit.jupiter.api.Assertions.*;

public class MergedOutputEntityTest {

    @Test
    void testMergedOutputEntityWithDynamicValues() {
        // Generate dynamic test data
        String crdsCode = UUID.randomUUID().toString();
        String regAddressCountry = UUID.randomUUID().toString();
        String bnppSite = UUID.randomUUID().toString();
        String siteCountry = UUID.randomUUID().toString().substring(0, 2).toUpperCase();
        String siteStatus = UUID.randomUUID().toString();
        String kycSegment = UUID.randomUUID().toString();
        String riskIndustryCode = UUID.randomUUID().toString();
        String riskIndustryDescription = UUID.randomUUID().toString();
        String businessGroup = UUID.randomUUID().toString();

        String city = UUID.randomUUID().toString();
        String postalCode = String.valueOf(ThreadLocalRandom.current().nextInt(100000, 999999));
        int ptyId = ThreadLocalRandom.current().nextInt(100, 999);
        int kycId = ThreadLocalRandom.current().nextInt(1000, 9999);
        String identifierCrdsCode = crdsCode;

        // Build embedded address
        RegistrationAddress address = RegistrationAddress.builder()
                .city(city)
                .country(regAddressCountry)
                .postalCode(postalCode)
                .build();

        // Build identifier
        Identifiers identifier = Identifiers.builder()
                .ptyId(ptyId)
                .crdsCode(identifierCrdsCode)
                .kycId(kycId)
                .build();

        // Build main entity
        MergedOutputEntity entity = MergedOutputEntity.builder()
                .crdsCode(crdsCode)
                .regAddressCountry(regAddressCountry)
                .bnppSite(bnppSite)
                .siteCountry(siteCountry)
                .siteStatus(siteStatus)
                .kycSegment(kycSegment)
                .riskIndustryCode(riskIndustryCode)
                .riskIndustryDescription(riskIndustryDescription)
                .businessGroup(businessGroup)
                .registrationAddress(address)
                .identifiers(List.of(identifier))
                .build();

        // Assertions (still without getters or hardcoding)
        assertAll("MergedOutputEntity dynamic values",
                () -> assertEquals(crdsCode, entity.crdsCode),
                () -> assertEquals(regAddressCountry, entity.regAddressCountry),
                () -> assertEquals(bnppSite, entity.bnppSite),
                () -> assertEquals(siteCountry, entity.siteCountry),
                () -> assertEquals(siteStatus, entity.siteStatus),
                () -> assertEquals(kycSegment, entity.kycSegment),
                () -> assertEquals(riskIndustryCode, entity.riskIndustryCode),
                () -> assertEquals(riskIndustryDescription, entity.riskIndustryDescription),
                () -> assertEquals(businessGroup, entity.businessGroup),
                () -> assertEquals(city, entity.registrationAddress.city),
                () -> assertEquals(regAddressCountry, entity.registrationAddress.country),
                () -> assertEquals(postalCode, entity.registrationAddress.postalCode),
                () -> assertEquals(1, entity.identifiers.size()),
                () -> assertEquals(identifierCrdsCode, entity.identifiers.get(0).crdsCode),
                () -> assertEquals(ptyId, entity.identifiers.get(0).ptyId),
                () -> assertEquals(kycId, entity.identifiers.get(0).kycId)
        );
    }
}
package com.example.jsonreader.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MergedOutputEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String crdsCode;
    private String bnppSite;
    private String siteCountry;
    private String siteStatus;
    private String kycSegment;
    private String riskIndustry;
    private String registrationAddress;
    private String registrationCountry;
}






package com.example.jsonreader.repository;

import com.example.jsonreader.entity.MergedOutputEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MergedOutputRepository extends JpaRepository<MergedOutputEntity, Long> {
}




package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entityList = mergedData.stream()
                .map(data -> MergedOutputEntity.builder()
                        .crdsCode(data.getCrdsCode())
                        .bnppSite(data.getBnppSite())
                        .siteCountry(data.getSiteCountry())
                        .siteStatus(data.getSiteStatus())
                        .kycSegment(data.getKycSegment())
                        .riskIndustry(data.getRiskIndustry())
                        .registrationAddress(data.getRegistrationAddress())
                        .registrationCountry(data.getRegistrationCountry())
                        .build())
                .toList();

        repository.saveAll(entityList);
    }
}



@GetMapping("/api/save")
public ResponseEntity<String> mergeAndSaveToDatabase() {
    List<MergedOutput> mergedData = jsonReaderService.mergeAndDisplayData();
    mergedOutputPersistenceService.saveToH2Database(mergedData);
    return ResponseEntity.ok("Merged data saved to H2 database successfully.");
}



package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.Identifiers;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entityList = mergedData.stream()
                .map(data -> {
                    Identifiers firstIdentifier = data.getIdentifiers() != null && !data.getIdentifiers().isEmpty()
                            ? data.getIdentifiers().get(0)
                            : new Identifiers();

                    return MergedOutputEntity.builder()
                            .crdsCode(firstIdentifier.getCrdsCode())
                            .bnppSite(firstIdentifier.getBnppSite())
                            .siteCountry(firstIdentifier.getSiteCountry())
                            .siteStatus(firstIdentifier.getSiteStatus())
                            .registrationAddress(firstIdentifier.getRegistrationAddress())
                            .registrationCountry(firstIdentifier.getRegistrationCountry())
                            .kycSegment(data.getKycSegment())
                            .riskIndustry(data.getRiskIndustry())
                            .build();
                })
                .toList();

        repository.saveAll(entityList);
    }
}



package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.Identifiers;
import com.example.jsonreader.model.KycSite;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entityList = mergedData.stream()
                .map(data -> {
                    Identifiers firstIdentifier = data.getIdentifiers() != null && !data.getIdentifiers().isEmpty()
                            ? data.getIdentifiers().get(0)
                            : new Identifiers();

                    String registrationAddress = firstIdentifier.getRegistrationAddress() != null
                            ? firstIdentifier.getRegistrationAddress().getFullAddress()
                            : null;

                    String registrationCountry = firstIdentifier.getRegistrationAddress() != null
                            ? firstIdentifier.getRegistrationAddress().getCountry()
                            : null;

                    KycSite kycSite = data.getKycSite();

                    return MergedOutputEntity.builder()
                            .crdsCode(firstIdentifier.getCrdsCode())
                            .registrationAddress(registrationAddress)
                            .registrationCountry(registrationCountry)
                            .bnppSite(kycSite != null ? kycSite.getBnppSite() : null)
                            .siteCountry(kycSite != null ? kycSite.getSiteCountry() : null)
                            .siteStatus(kycSite != null ? kycSite.getSiteStatus() : null)
                            .kycSegment(data.getKycSegment())
                            .riskIndustry(data.getRiskIndustry())
                            .build();
                })
                .toList();

        repository.saveAll(entityList);
    }
}



RegistrationAddress address = data.getRegistrationAddress() != null && !data.getRegistrationAddress().isEmpty()
    ? data.getRegistrationAddress().get(0)
    : new RegistrationAddress();





public class MergedService {

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedEntity> entities = mergedData.stream()
            .map(data -> {

                Identifiers firstIdentifier = (data.getIdentifiers() != null && !data.getIdentifiers().isEmpty())
                        ? data.getIdentifiers().get(0)
                        : new Identifiers();

                RegistrationAddress address = data.getRegistrationAddress();

                KycSite kycSite = (data.getKycSite() != null && !data.getKycSite().isEmpty())
                        ? data.getKycSite().get(0)
                        : null;

                return MergedEntity.builder()
                        .crdsCode(firstIdentifier.getCrdsCode())
                        .registrationAddress(address != null ? String.valueOf(address.getRegistrationAddress()) : null)
                        .registrationCountry(address != null ? address.getCountry() : null)
                        .bnppSite(kycSite != null ? kycSite.getSiteBnppEntity() : null)
                        .siteCountry(kycSite != null ? kycSite.getSiteCountry() : null)
                        .siteStatus(kycSite != null ? kycSite.getSiteStatus() : null)
                        .kycSegment(data.getKycSegment())
                        .riskIndustry(String.valueOf(data.getKycRiskIndustry()))
                        .build();
            })
            .toList();

        // Save to DB using your repository
        mergedRepo.saveAll(entities);
    }
}





private String defaultIfNull(String value) {
    return value != null ? value : "";
}

return MergedEntity.builder()
                        .crdsCode(firstIdentifier != null ? defaultIfNull(firstIdentifier.getCrdsCode()) : "")
                        .registrationAddress(regAddress != null ? defaultIfNull(regAddress.getRegistrationAddress()) : "")
                        .registrationCountry(regAddress != null ? defaultIfNull(regAddress.getCountry()) : "")
                        .bnppSite(firstKycSite != null ? defaultIfNull(firstKycSite.getSiteBnppEntity()) : "")
                        .siteCountry(firstKycSite != null ? defaultIfNull(firstKycSite.getSiteCountry()) : "")
                        .siteStatus(firstKycSite != null ? defaultIfNull(firstKycSite.getSiteStatus()) : "")
                        .kycSegment(defaultIfNull(data.getKycSegment()))
                        .riskIndustry(data.getKycRiskIndustry() != null
                                ? defaultIfNull(data.getKycRiskIndustry().getCode()) + "-" + defaultIfNull(data.getKycRiskIndustry().getDescription())
                                : "")
                        .build();
















package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedEntity;
import com.example.jsonreader.model.*;
import com.example.jsonreader.repository.MergedRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedService {

    private final MergedRepository repository;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedEntity> entityList = mergedData.stream()
                .map(data -> {
                    // Safe retrieval from List<Identifiers>
                    Identifiers firstIdentifier = (data.getIdentifiers() != null && !data.getIdentifiers().isEmpty())
                            ? data.getIdentifiers().get(0)
                            : new Identifiers();

                    // Safe retrieval from RegistrationAddress
                    RegistrationAddress regAddress = data.getRegistrationAddress() != null
                            ? data.getRegistrationAddress()
                            : new RegistrationAddress();

                    // Safe retrieval from List<KycSite>
                    KycSite firstKycSite = (data.getKycSite() != null && !data.getKycSite().isEmpty())
                            ? data.getKycSite().get(0)
                            : new KycSite();

                    // Safe retrieval from KycRiskIndustry
                    KycRiskIndustry riskIndustry = data.getKycRiskIndustry() != null
                            ? data.getKycRiskIndustry()
                            : new KycRiskIndustry();

                    return MergedEntity.builder()
                            .crdsCode(defaultIfNull(firstIdentifier.getCrdsCode()))
                            .registrationAddress(defaultIfNull(regAddress.getRegistrationAddress()))
                            .registrationCountry(defaultIfNull(regAddress.getCountry()))
                            .bnppSite(defaultIfNull(firstKycSite.getSiteBnppEntity()))
                            .siteCountry(defaultIfNull(firstKycSite.getSiteCountry()))
                            .siteStatus(defaultIfNull(firstKycSite.getSiteStatus()))
                            .kycSegment(defaultIfNull(data.getKycSegment()))
                            .riskIndustry(defaultIfNull(riskIndustry.getCode()) + "-" + defaultIfNull(riskIndustry.getDescription()))
                            .build();
                })
                .toList();

        repository.saveAll(entityList);
    }

    private String defaultIfNull(String value) {
        return value != null ? value : "";
    }
}






package com.example.jsonreader.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "merged_entity")
public class MergedEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String crdsCode;
    private String registrationAddress;
    private String registrationCountry;
    private String bnppSite;
    private String siteCountry;
    private String siteStatus;
    private String kycSegment;
    private String riskIndustry;

    // This method sets all nulls to empty string before insert/update
    @PrePersist
    @PreUpdate
    public void prePersist() {
        if (crdsCode == null) crdsCode = "";
        if (registrationAddress == null) registrationAddress = "";
        if (registrationCountry == null) registrationCountry = "";
        if (bnppSite == null) bnppSite = "";
        if (siteCountry == null) siteCountry = "";
        if (siteStatus == null) siteStatus = "";
        if (kycSegment == null) kycSegment = "";
        if (riskIndustry == null) riskIndustry = "";
    }
}











List<String> addressParts = Arrays.asList(
    defaultIfNull(address.getStreet()),
    defaultIfNull(address.getCity()),
    defaultIfNull(address.getState()),
    defaultIfNull(address.getPostalCode())
);

String registrationAddress = addressParts.stream()
    .filter(part -> !part.isBlank())
    .collect(Collectors.joining(", "));















private String buildRegistrationAddress(RegistrationAddress address) {
        if (address == null) return "";

        List<String> addressParts = Arrays.asList(
                defaultIfNull(address.getStreet()),
                defaultIfNull(address.getCity()),
                defaultIfNull(address.getState()),
                defaultIfNull(address.getPostalCode())
        );

        return addressParts.stream()
                .filter(part -> !part.isBlank())
                .collect(Collectors.joining(", "));
    }



package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedEntity;
import com.example.jsonreader.repository.MergedRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CsvReaderService {

    private final MergedRepository mergedRepository;

    public void readCsvAndSaveToDatabase(String csvPath) {
        List<MergedEntity> mergedEntities = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(csvPath))) {
            String line;
            boolean isHeader = true;

            while ((line = br.readLine()) != null) {
                if (isHeader) {
                    isHeader = false;
                    continue;
                }

                String[] data = line.split(";", -1); // -1 to retain empty values

                String crdsCode = getValue(data, 0);
                String bnppSite = getValue(data, 1);
                String siteStatus = getValue(data, 2);
                String kycSegment = getValue(data, 3);
                String riskIndustryCode = getValue(data, 4);
                String riskIndustryDescription = getValue(data, 5);

                String riskIndustry = "";
                if (!riskIndustryCode.isEmpty() || !riskIndustryDescription.isEmpty()) {
                    riskIndustry = riskIndustryCode + "-" + riskIndustryDescription;
                }

                MergedEntity entity = MergedEntity.builder()
                        .crdsCode(crdsCode)
                        .bnppSite(bnppSite)
                        .siteStatus(siteStatus)
                        .kycSegment(kycSegment)
                        .riskIndustry(riskIndustry)
                        .build();

                mergedEntities.add(entity);
            }

            mergedRepository.saveAll(mergedEntities);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getValue(String[] data, int index) {
        if (index >= data.length || data[index] == null || data[index].trim().equalsIgnoreCase("null")) {
            return "";
        }
        return data[index].trim();
    }
}



package com.example.jsonreader.controller;

import com.example.jsonreader.service.CsvReaderService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/csv")
@RequiredArgsConstructor
public class CsvController {

    private final CsvReaderService csvReaderService;

    @PostMapping("/import")
    public ResponseEntity<String> importCsv() {
        String path = "src/main/resources/merged_data.csv";
        csvReaderService.readCsvAndSaveToDatabase(path);
        return ResponseEntity.ok("CSV imported into H2 DB successfully");
    }
}




package com.sunscreening.jsonreader.service;

import com.sunscreening.jsonreader.entity.MergedOutputEntity;
import com.sunscreening.jsonreader.repository.MergedOutputRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CsvToDatabaseService {

    private final MergedOutputRepository repository;

    public void readCsvAndSaveToDatabase(String csvFilePath) {
        List<MergedOutputEntity> entityList = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
            String line;
            boolean isFirstLine = true;

            while ((line = br.readLine()) != null) {
                if (isFirstLine) { // skip header
                    isFirstLine = false;
                    continue;
                }

                String[] values = line.split(";", -1); // -1 keeps empty strings

                MergedOutputEntity entity = MergedOutputEntity.builder()
                        .crdsCode(defaultIfNull(values[0]))
                        .registrationAddress(defaultIfNull(values[1]))
                        .registrationCountry(defaultIfNull(values[2]))
                        .bnppSite(defaultIfNull(values[3]))
                        .siteCountry(defaultIfNull(values[4]))
                        .siteStatus(defaultIfNull(values[5]))
                        .kycSegment(defaultIfNull(values[6]))
                        .riskIndustry(defaultIfNull(values[7]))
                        .build();

                entityList.add(entity);
            }

            repository.saveAll(entityList);
            System.out.println("CSV Data saved to H2 database.");

        } catch (Exception e) {
            System.err.println("Error reading CSV: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String defaultIfNull(String value) {
        return (value == null || value.trim().isEmpty()) ? "" : value.trim();
    }
}
