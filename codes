package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVWriter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.*;

@Service
@RequiredArgsConstructor
public class JsonReaderService {

    private final ApiProperties apiProperties;
    private final RestTemplate restTemplate;

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            String accessToken = fetchAccessTokenFromHeader();

            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(accessToken);
            headers.setAccept(List.of(MediaType.APPLICATION_JSON));
            headers.set("Accept", "*/*;version=gamma");

            HttpEntity<Void> request = new HttpEntity<>(headers);

            ResponseEntity<String> entityResponse = restTemplate.exchange(
                    apiProperties.getEntitiesUrl(),
                    HttpMethod.GET,
                    request,
                    String.class
            );

            List<Wrapper> wrappers = mapper.readValue(entityResponse.getBody(), EntityResponse.class).getResults();

            List<Integer> allPtyIds = wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream())
                    .map(Identifiers::getPtyId)
                    .filter(Objects::nonNull)
                    .distinct()
                    .toList();

            for (Integer ptyId : allPtyIds) {
                String kycUrlWithPtyId = apiProperties.getKycUrl() + "?ptyId=" + ptyId;

                ResponseEntity<String> kycResponse = restTemplate.exchange(
                        kycUrlWithPtyId,
                        HttpMethod.GET,
                        request,
                        String.class
                );

                JsonNode resultsNode = null;
                List<KycDetails> kycList = new ArrayList<>();

                if (kycResponse.getStatusCode().is2xxSuccessful() &&
                        kycResponse.getBody() != null && !kycResponse.getBody().isBlank()) {

                    JsonNode root = mapper.readTree(kycResponse.getBody());
                    resultsNode = root.get("results");

                    if (resultsNode != null && resultsNode.isArray() && !resultsNode.isEmpty()) {
                        kycList = mapper.readValue(
                                resultsNode.toString(),
                                mapper.getTypeFactory().constructCollectionType(List.class, KycDetails.class)
                        );
                    }
                }

                wrappers.stream()
                        .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                        .filter(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                                .anyMatch(id -> ptyId.equals(id.getPtyId())))
                        .forEach(wrapper -> {
                            MergedOutput output = new MergedOutput();
                            output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                            output.setBusinessGroup(wrapper.getBusinessGroup());

                            for (KycDetails kyc : kycList) {
                                if (kyc != null && kyc.getKycData() != null && kyc.getIdentifiers() != null &&
                                        kyc.getIdentifiers().stream().anyMatch(id -> ptyId.equals(id.getPtyId()))) {

                                    output.setKycSegment(kyc.getKycData().getKycSegment());
                                    output.setKycSite(kyc.getKycData().getKycSite());
                                    output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                    break;
                                }
                            }

                            mergedResults.add(output);
                        });
            }

            // After merging, export selected fields to CSV
            exportCsvReport(mergedResults, "merged_report.csv");

            return mergedResults;

        } catch (Exception e) {
            throw new RuntimeException("❌ Error during merge: " + e.getMessage(), e);
        }
    }

    private String fetchAccessTokenFromHeader() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", apiProperties.getTokenAuthHeader());
            headers.setAccept(List.of(MediaType.APPLICATION_JSON));

            HttpEntity<Void> request = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    apiProperties.getTokenUrl(),
                    HttpMethod.POST,
                    request,
                    String.class
            );

            if (response.getStatusCode().is2xxSuccessful()) {
                JsonNode json = new ObjectMapper().readTree(response.getBody());
                return json.get("access_token").asText();
            } else {
                throw new RuntimeException("❌ Token fetch failed: " + response.getStatusCode());
            }

        } catch (Exception e) {
            throw new RuntimeException("❌ Error fetching token: " + e.getMessage(), e);
        }
    }

    // ✨ Generate CSV Report with semicolon (;) separator
    public void exportCsvReport(List<MergedOutput> mergedData, String outputPath) {
        try (
                Writer writer = new FileWriter(outputPath);
                CSVWriter csvWriter = new CSVWriter(
                        writer,
                        ';', // Use semicolon
                        CSVWriter.NO_QUOTE_CHARACTER,
                        CSVWriter.DEFAULT_ESCAPE_CHARACTER,
                        CSVWriter.DEFAULT_LINE_END
                )
        ) {
            // Write header
            csvWriter.writeNext(new String[]{"crdsCode", "kycSite"});

            // Write rows
            for (MergedOutput output : mergedData) {
                if (output.getIdentifiers() != null) {
                    for (Identifiers id : output.getIdentifiers()) {
                        String crdsCode = id.getCrdsCode();
                        String kycSite = output.getKycSite();
                        csvWriter.writeNext(new String[]{crdsCode, kycSite});
                    }
                }
            }

            System.out.println("✅ CSV report generated at: " + outputPath);
        } catch (IOException e) {
            throw new RuntimeException("❌ Failed to write CSV: " + e.getMessage(), e);
        }
    }
}
