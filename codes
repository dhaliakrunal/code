# H2 DB Config
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create



package com.example.jsonreader.entity;

import jakarta.persistence.*;
import lombok.Data;

import java.util.List;

@Entity
@Table(name = "merged_output")
@Data
public class MergedOutputEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String businessGroup;
    private String kycSegment;
    private String kycSite;
    private String kycRiskIndustry;

    @Lob
    private String identifiersJson; // store JSON array as string
}




package com.example.jsonreader.repository;

import com.example.jsonreader.entity.MergedOutputEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MergedOutputRepository extends JpaRepository<MergedOutputEntity, Long> {
}




package com.example.jsonreader.service;

import com.example.jsonreader.entity.MergedOutputEntity;
import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.repository.MergedOutputRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MergedOutputPersistenceService {

    private final MergedOutputRepository repository;
    private final ObjectMapper objectMapper;

    public void saveToH2Database(List<MergedOutput> mergedData) {
        List<MergedOutputEntity> entities = mergedData.stream().map(output -> {
            MergedOutputEntity entity = new MergedOutputEntity();
            entity.setBusinessGroup(output.getBusinessGroup());
            entity.setKycSegment(output.getKycSegment());
            entity.setKycSite(output.getKycSite());
            entity.setKycRiskIndustry(output.getKycRiskIndustry());

            try {
                String identifiersJson = objectMapper.writeValueAsString(output.getIdentifiers());
                entity.setIdentifiersJson(identifiersJson);
            } catch (Exception e) {
                throw new RuntimeException("Error converting identifiers to JSON", e);
            }

            return entity;
        }).toList();

        repository.saveAll(entities);
    }
}





List<MergedOutput> mergedData = jsonReaderService.mergeAndDisplayData();
mergedOutputPersistenceService.saveToH2Database(mergedData);
