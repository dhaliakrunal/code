package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileWriter;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class JsonReaderService {

    private final ObjectMapper mapper = new ObjectMapper();
    private List<KycDetails> mergedData = new ArrayList<>();

    @PostConstruct
    public void loadAndMergeData() {
        try {
            // Read KYC details
            KycDetailsWrapper kycWrapper = mapper.readValue(
                    new File("src/main/resources/kycDetails.json"),
                    KycDetailsWrapper.class
            );
            List<KycDetails> kycList = kycWrapper.getResults();

            // Build kycMap
            Map<Integer, KycDetails> kycMap = kycList.stream()
                    .filter(k -> k.getKycId() != null)
                    .collect(Collectors.toMap(KycDetails::getKycId, Function.identity()));

            // Read Entity details
            EntityResponse entityResponse = mapper.readValue(
                    new File("src/main/resources/entities.json"),
                    EntityResponse.class
            );

            mergedData = entityResponse.getResults().stream()
                    .map(Wrapper::getEntity)
                    .filter(Objects::nonNull)
                    .map(entity -> {
                        List<Identifiers> ids = entity.getIdentifiers();
                        if (ids != null && !ids.isEmpty()) {
                            Integer kycId = ids.get(0).getKycId();
                            System.out.println("Checking entity with kycId: " + kycId);
                            KycDetails match = kycMap.get(kycId);
                            if (match != null) {
                                match.setIdentifiers(ids);
                                return match;
                            }
                        }
                        return null;
                    })
                    .filter(Objects::nonNull)
                    .collect(Collectors.toList());

            if (mergedData.isEmpty()) {
                System.out.println("❌ No matching KYC records found.");
            } else {
                System.out.println("✅ Merged KYC records: ");
                mergedData.forEach(k -> {
                    System.out.println("kycSegment: " + k.getKycSegment());
                    System.out.println("kycSite: " + k.getKycSite());
                    System.out.println("riskIndustry: " + k.getRiskIndustry());
                    System.out.println("identifiers: " + k.getIdentifiers());
                    System.out.println("------------------------------");
                });

                // Save merged output
                mapper.writerWithDefaultPrettyPrinter()
                        .writeValue(new FileWriter("src/main/resources/merged_output.json"), mergedData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<KycDetails> getMergedData() {
        return mergedData;
    }
}
