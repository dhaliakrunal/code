✅ 1. application.properties

json.entities-api=https://api.example.com/entities
json.kyc-api=https://api.example.com/kyc-details
json.output-path=src/main/resources/merged_output.json

✅ 2. JsonFileProperties.java

package com.example.jsonreader.config;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Data
@Configuration
@ConfigurationProperties(prefix = "json")
public class JsonFileProperties {
private String entitiesApi;
private String kycApi;
private String outputPath;
}

✅ 3. AppConfig.java (RestTemplate Bean)

package com.example.jsonreader.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {
@Bean
public RestTemplate restTemplate() {
return new RestTemplate();
}
}

✅ 4. JsonReaderService.java (Updated for APIs)

package com.example.jsonreader.service;

import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
public class JsonReaderService {

pgsql
Copy
Edit
private final JsonFileProperties properties;
private final RestTemplate restTemplate;

public JsonReaderService(JsonFileProperties properties, RestTemplate restTemplate) {
    this.properties = properties;
    this.restTemplate = restTemplate;
}

public List<MergedOutput> mergeAndDisplayData() {
    List<MergedOutput> mergedResults = new ArrayList<>();

    try {
        EntityResponse entityResponse = restTemplate.getForObject(properties.getEntitiesApi(), EntityResponse.class);
        KycDetailsWrapper kycWrapper = restTemplate.getForObject(properties.getKycApi(), KycDetailsWrapper.class);

        if (entityResponse != null && kycWrapper != null) {
            List<Wrapper> wrappers = entityResponse.getResults();
            List<KycDetails> kycDetailsList = kycWrapper.getResults();

            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getKycId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> Objects.equals(kid.getKycId(), entityId.getKycId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());
                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }
                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            // Save to JSON
            ObjectMapper mapper = new ObjectMapper();
            mapper.writerWithDefaultPrettyPrinter().writeValue(new File(properties.getOutputPath()), mergedResults);

            // Print to console
            System.out.println("\n✅ Merged Results:");
            mergedResults.forEach(result -> {
                try {
                    System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result));
                } catch (Exception e) {
                    System.err.println("Error printing JSON: " + e.getMessage());
                }
            });
        }

    } catch (Exception e) {
        System.err.println("❌ Error during merging: " + e.getMessage());
        e.printStackTrace();
    }

    return mergedResults;
}
}

✅ 5. JsonReaderController.java

package com.example.jsonreader.controller;

import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.service.JsonReaderService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class JsonReaderController {

kotlin
Copy
Edit
private final JsonReaderService service;

public JsonReaderController(JsonReaderService service) {
    this.service = service;
}

@GetMapping("/merged-data")
public List<MergedOutput> getMergedData() {
    return service.mergeAndDisplayData();
}
}

✅ 6. JsonReaderApplication.java

package com.example.jsonreader;

import com.example.jsonreader.service.JsonReaderService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class JsonReaderApplication implements CommandLineRunner {

arduino
Copy
Edit
private final JsonReaderService jsonReaderService;

public JsonReaderApplication(JsonReaderService jsonReaderService) {
    this.jsonReaderService = jsonReaderService;
}

public static void main(String[] args) {
    SpringApplication.run(JsonReaderApplication.class, args);
}

@Override
public void run(String... args) {
    jsonReaderService.mergeAndDisplayData();
}
}






 private final RestTemplate restTemplate;

    @Value("${api.url}")
    private String apiUrl;

    @Value("${api.token}")
    private String token;

    public ApiClientService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public void fetchDataFromApi() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", token);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                apiUrl,
                HttpMethod.GET,
                entity,
                String.class
        );

        System.out.println("Response: " + response.getBody());
    }
