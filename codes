package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.opencsv.CSVWriter;
import org.springframework.stereotype.Service;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;

@Service
public class CsvReportService {

    private static final String OUTPUT_FILE = "merged_report.csv";

    public String generateCsvReport(List<MergedOutput> mergedData) {
        try (
                Writer writer = new FileWriter(OUTPUT_FILE);
                CSVWriter csvWriter = new CSVWriter(
                        writer,
                        ';', // Semicolon separator
                        CSVWriter.NO_QUOTE_CHARACTER,
                        CSVWriter.DEFAULT_ESCAPE_CHARACTER,
                        CSVWriter.DEFAULT_LINE_END
                )
        ) {
            // Write header
            csvWriter.writeNext(new String[]{
                    "crdsCode",
                    "bnppSite",
                    "siteCountry",
                    "siteStatus",
                    "kycSegment",
                    "riskIndustry",
                    "regAddressAllInLine",
                    "regAddressCountry"
            });

            // Write rows
            for (MergedOutput output : mergedData) {
                List<Identifiers> identifiers = output.getIdentifiers();
                KycSite site = output.getKycSite();
                KycRiskIndustry riskIndustry = output.getKycRiskIndustry();
                RegistrationAddress regAddress = output.getRegistrationAddress();

                String kycSegment = output.getKycSegment();

                String bnppSite = site != null ? site.getBnppSite() : "";
                String siteCountry = site != null ? site.getCountry() : "";
                String siteStatus = site != null ? site.getStatus() : "";

                String riskIndustryFormatted = (riskIndustry != null)
                        ? riskIndustry.getCode() + " - " + riskIndustry.getDescription()
                        : "";

                String regAddressAllInLine = (regAddress != null)
                        ? String.join(", ",
                        nonNull(regAddress.getLine1()),
                        nonNull(regAddress.getLine2()),
                        nonNull(regAddress.getCity()),
                        nonNull(regAddress.getState()))
                        : "";

                String regAddressCountry = (regAddress != null) ? regAddress.getCountry() : "";

                if (identifiers != null) {
                    for (Identifiers id : identifiers) {
                        String crdsCode = id.getCrdsCode();

                        csvWriter.writeNext(new String[]{
                                crdsCode,
                                bnppSite,
                                siteCountry,
                                siteStatus,
                                kycSegment != null ? kycSegment : "",
                                riskIndustryFormatted,
                                regAddressAllInLine,
                                regAddressCountry
                        });
                    }
                }
            }

            System.out.println("✅ CSV generated at: " + OUTPUT_FILE);
            return OUTPUT_FILE;

        } catch (IOException e) {
            throw new RuntimeException("❌ Error writing CSV: " + e.getMessage(), e);
        }
    }

    private String nonNull(String value) {
        return value != null ? value : "";
    }
}





package com.example.jsonreader.controller;

import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.service.CsvReportService;
import com.example.jsonreader.service.JsonReaderService;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.io.File;
import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class JsonReaderController {

    private final JsonReaderService jsonReaderService;
    private final CsvReportService csvReportService;

    // Endpoint to return merged data as JSON
    @GetMapping("/merged-data")
    public ResponseEntity<List<MergedOutput>> getMergedData() {
        List<MergedOutput> mergedData = jsonReaderService.mergeAndDisplayData();
        return ResponseEntity.ok(mergedData);
    }

    // Endpoint to generate and download CSV
    @GetMapping("/download/csv")
    public ResponseEntity<Resource> downloadCsvReport() {
        List<MergedOutput> mergedData = jsonReaderService.mergeAndDisplayData();

        // Generate CSV
        String filePath = csvReportService.generateCsvReport(mergedData);

        File file = new File(filePath);
        if (!file.exists()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

        FileSystemResource resource = new FileSystemResource(file);

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=merged_report.csv");
        headers.setContentType(MediaType.parseMediaType("text/csv"));

        return ResponseEntity.ok()
                .headers(headers)
                .contentLength(file.length())
                .body(resource);
    }
}
