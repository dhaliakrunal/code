public List<MergedOutput> mergeAndDisplayData() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    System.out.println("üîç Fetching access token...");
    String accessToken = fetchAccessTokenFromHeader();
    System.out.println("‚úÖ Access token received.");

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(accessToken);
    headers.setAccept(List.of(MediaType.APPLICATION_JSON));
    headers.set("Accept", "*/*;version=gamma");

    HttpEntity<Void> request = new HttpEntity<>(headers);

    System.out.println("üåê Calling Entities API: " + apiProperties.getEntitiesUrl());
    ResponseEntity<String> entityResponse = restTemplate.exchange(
            apiProperties.getEntitiesUrl(),
            HttpMethod.GET,
            request,
            String.class
    );

    List<Wrapper> wrappers = mapper.readValue(entityResponse.getBody(), EntityResponse.class).getResults();

    List<Integer> allPtyIds = wrappers.stream()
            .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
            .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream())
            .map(Identifiers::getPtyId)
            .filter(Objects::nonNull)
            .distinct()
            .toList();

    List<MergedOutput> mergedResults = allPtyIds.stream()
            .flatMap(ptyId -> {
                String kycUrlWithPtyId = apiProperties.getKycUrl() + "?ptyId=" + ptyId;
                System.out.println("üåê Calling KYC API for ptyId=" + ptyId);

                ResponseEntity<String> kycResponse = restTemplate.exchange(
                        kycUrlWithPtyId,
                        HttpMethod.GET,
                        request,
                        String.class
                );

                List<KycDetails> kycList = Optional.ofNullable(kycResponse.getBody())
                        .filter(body -> !body.isBlank())
                        .map(body -> {
                            try {
                                JsonNode resultsNode = mapper.readTree(body).get("results");
                                if (resultsNode != null && resultsNode.isArray() && !resultsNode.isEmpty()) {
                                    return mapper.readValue(
                                            resultsNode.toString(),
                                            mapper.getTypeFactory().constructCollectionType(List.class, KycDetails.class)
                                    );
                                }
                            } catch (IOException e) {
                                throw new RuntimeException("Failed to parse KYC response", e);
                            }
                            return List.<KycDetails>of();
                        }).orElse(List.of());

                return wrappers.stream()
                        .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                        .filter(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                                .anyMatch(id -> ptyId.equals(id.getPtyId())))
                        .map(wrapper -> {
                            MergedOutput output = new MergedOutput();
                            output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                            output.setBusinessGroup(wrapper.getBusinessGroup());

                            kycList.stream()
                                    .filter(kyc -> kyc.getKycData() != null && kyc.getIdentifiers() != null &&
                                            kyc.getIdentifiers().stream().anyMatch(id -> ptyId.equals(id.getPtyId())))
                                    .findFirst()
                                    .ifPresent(kyc -> {
                                        output.setKycSegment(kyc.getKycData().getKycSegment());
                                        output.setKycSite(kyc.getKycData().getKycSite());
                                        output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                    });

                            return output;
                        });
            })
            .toList();

    System.out.println("‚úÖ Merging complete. Total records: " + mergedResults.size());
    return mergedResults;
}



package com.example.service;

import com.example.config.CsvFileProperties;
import com.example.model.*;
import org.springframework.stereotype.Service;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class CsvReportService {

    private final CsvFileProperties csvFileProperties;

    public CsvReportService(CsvFileProperties csvFileProperties) {
        this.csvFileProperties = csvFileProperties;
    }

    public void exportToCsv(List<MergedEntity> mergedEntities) throws IOException {
        String filePath = csvFileProperties.getOutputPath();

        try (FileWriter writer = new FileWriter(filePath)) {

            // Header
            writer.write("CRDS Code;Reg Address;Reg Address Country;BNPP Site;Site Country;Site Status;KYC Segment;Risk Industry Code-Desc\n");

            for (MergedEntity entity : mergedEntities) {
                StringBuilder line = new StringBuilder();

                // CRDS Code
                String crdsCode = entity.getIdentifiers() != null ? entity.getIdentifiers().getCrdsCode() : "";
                line.append(crdsCode).append(";");

                // Registration Address
                RegistrationAddress reg = entity.getRegistrationAddress();
                String regAddress = "", regCountry = "";
                if (reg != null) {
                    regAddress = String.join(" ",
                        reg.getLine1() != null ? reg.getLine1() : "",
                        reg.getLine2() != null ? reg.getLine2() : "",
                        reg.getCity() != null ? reg.getCity() : "",
                        reg.getState() != null ? reg.getState() : "",
                        reg.getZipCode() != null ? reg.getZipCode() : ""
                    ).trim();
                    regCountry = reg.getCountry() != null ? reg.getCountry() : "";
                }
                line.append(regAddress).append(";");
                line.append(regCountry).append(";");

                // KYC Site (first only)
                String bnppSite = "", siteCountry = "", siteStatus = "";
                List<KycSites> kycSites = entity.getKycSites();
                if (kycSites != null && !kycSites.isEmpty()) {
                    KycSites site = kycSites.get(0);
                    bnppSite = site.getSiteBnpP() != null ? site.getSiteBnpP() : "";
                    siteCountry = site.getSiteCountry() != null ? site.getSiteCountry() : "";
                    siteStatus = site.getSiteStatus() != null ? site.getSiteStatus() : "";
                }
                line.append(bnppSite).append(";");
                line.append(siteCountry).append(";");
                line.append(siteStatus).append(";");

                // KYC Segment
                String kycSegment = entity.getKycSegments() != null ? entity.getKycSegments() : "";
                line.append(kycSegment).append(";");

                // Risk Industry Code-Description
                String ric = "";
                List<RiskIndustry> riskIndustries = entity.getRiskIndustry();
                if (riskIndustries != null && !riskIndustries.isEmpty()) {
                    ric = riskIndustries.stream()
                            .map(r -> r.getRiskIndustryCode() + "-" + r.getRiskIndustryDescription())
                            .collect(Collectors.joining("|"));
                }
                line.append(ric);

                line.append("\n");
                writer.write(line.toString());
            }

            writer.flush();
        }
    }
}
