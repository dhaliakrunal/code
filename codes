✅ 1. application.properties

Place this in src/main/resources/application.properties:

json.entities-path=classpath:data/entities.json
json.kyc-path=classpath:data/kycDetails.json
json.output-path=merged_output.json

✅ 2. JsonFileProperties.java

Place this in a new config package (e.g., src/main/java/com/example/jsonreader/config/JsonFileProperties.java):

package com.example.jsonreader.config;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Data
@Configuration
@ConfigurationProperties(prefix = "json")
public class JsonFileProperties {
private String entitiesPath;
private String kycPath;
private String outputPath;
}

✅ 3. JsonReaderApplication.java (Enable the config)

package com.example.jsonreader;

import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.service.JsonReaderService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(JsonFileProperties.class)
public class JsonReaderApplication implements CommandLineRunner {

arduino
Copy
Edit
private final JsonReaderService jsonReaderService;

public JsonReaderApplication(JsonReaderService jsonReaderService) {
    this.jsonReaderService = jsonReaderService;
}

public static void main(String[] args) {
    SpringApplication.run(JsonReaderApplication.class, args);
}

@Override
public void run(String... args) {
    jsonReaderService.mergeAndDisplayData();
}
}

✅ 4. Updated JsonReaderService.java

package com.example.jsonreader.service;

import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
public class JsonReaderService {

pgsql
Copy
Edit
private final JsonFileProperties properties;
private final ResourceLoader resourceLoader;

public JsonReaderService(JsonFileProperties properties, ResourceLoader resourceLoader) {
    this.properties = properties;
    this.resourceLoader = resourceLoader;
}

public List<MergedOutput> mergeAndDisplayData() {
    List<MergedOutput> mergedResults = new ArrayList<>();

    try {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        // Load entity and KYC files
        Resource entityRes = resourceLoader.getResource(properties.getEntitiesPath());
        Resource kycRes = resourceLoader.getResource(properties.getKycPath());

        InputStream entityStream = entityRes.getInputStream();
        InputStream kycStream = kycRes.getInputStream();

        EntityResponse entityResponse = mapper.readValue(entityStream, EntityResponse.class);
        KycDetailsWrapper kycWrapper = mapper.readValue(kycStream, KycDetailsWrapper.class);

        List<Wrapper> wrappers = entityResponse.getResults();
        List<KycDetails> kycDetailsList = kycWrapper.getResults();

        for (Wrapper wrapper : wrappers) {
            List<Identifiers> entityIdentifiers = wrapper.getEntity().getIdentifiers();
            if (entityIdentifiers == null) continue;

            for (Identifiers entityId : entityIdentifiers) {
                for (KycDetails kyc : kycDetailsList) {
                    if (kyc.getIdentifiers() == null) continue;

                    for (Identifiers kycId : kyc.getIdentifiers()) {
                        if (kycId.getKycId() != null && Objects.equals(kycId.getKycId(), entityId.getKycId())) {
                            MergedOutput output = new MergedOutput();
                            output.setIdentifiers(entityIdentifiers);
                            output.setBusinessGroup(wrapper.getBusinessGroup());

                            if (kyc.getKycData() != null) {
                                output.setKycSegment(kyc.getKycData().getKycSegment());
                                output.setKycSite(kyc.getKycData().getKycSite());
                                output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                            }

                            mergedResults.add(output);
                            break;
                        }
                    }
                }
            }
        }

        // Save to file using path from properties
        mapper.writerWithDefaultPrettyPrinter()
                .writeValue(new File(properties.getOutputPath()), mergedResults);

        System.out.println("✅ Merged output written to: " + properties.getOutputPath());
        mergedResults.forEach(System.out::println);

    } catch (Exception e) {
        System.err.println("Error during merging: " + e.getMessage());
        e.printStackTrace();
    }

    return mergedResults;
}
}

You're all set!
