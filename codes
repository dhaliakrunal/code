# API URLs
api.entities-url=https://api.example.com/entities
api.kyc-url=https://api.example.com/kycDetails

# Access Token
api.access-token=your_actual_access_token_here

# Output file path
json.output-path=src/main/resources/merged_output.json



package com.example.jsonreader.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "api")
@Getter
@Setter
public class ApiProperties {
    private String entitiesUrl;
    private String kycUrl;
    private String accessToken;
}





package com.example.jsonreader.service;

import com.example.jsonreader.config.ApiProperties;
import com.example.jsonreader.config.JsonFileProperties;
import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
public class JsonReaderService {

    private final JsonFileProperties properties;
    private final RestTemplate restTemplate;
    private final ApiProperties apiProperties;

    @Autowired
    public JsonReaderService(JsonFileProperties properties,
                              RestTemplate restTemplate,
                              ApiProperties apiProperties) {
        this.properties = properties;
        this.restTemplate = restTemplate;
        this.apiProperties = apiProperties;
    }

    public List<MergedOutput> mergeAndDisplayData() {
        List<MergedOutput> mergedResults = new ArrayList<>();

        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", "Bearer " + apiProperties.getAccessToken());

            HttpEntity<Void> request = new HttpEntity<>(headers);

            // 1. Fetch from API
            ResponseEntity<EntityResponse> entityResponse =
                    restTemplate.exchange(apiProperties.getEntitiesUrl(), HttpMethod.GET, request, EntityResponse.class);
            List<Wrapper> wrappers = entityResponse.getBody().getResults();

            ResponseEntity<KycDetailsWrapper> kycResponse =
                    restTemplate.exchange(apiProperties.getKycUrl(), HttpMethod.GET, request, KycDetailsWrapper.class);
            List<KycDetails> kycDetailsList = kycResponse.getBody().getResults();

            // 2. Merge logic
            wrappers.stream()
                    .filter(wrapper -> wrapper.getEntity() != null && wrapper.getEntity().getIdentifiers() != null)
                    .flatMap(wrapper -> wrapper.getEntity().getIdentifiers().stream()
                            .filter(entityId -> entityId.getKycId() != null)
                            .flatMap(entityId -> kycDetailsList.stream()
                                    .filter(kyc -> kyc.getIdentifiers() != null)
                                    .filter(kyc -> kyc.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getKycId() != null && kid.getKycId().equals(entityId.getKycId())))
                                    .map(kyc -> {
                                        MergedOutput output = new MergedOutput();
                                        output.setIdentifiers(wrapper.getEntity().getIdentifiers());
                                        output.setBusinessGroup(wrapper.getBusinessGroup());

                                        if (kyc.getKycData() != null) {
                                            output.setKycSegment(kyc.getKycData().getKycSegment());
                                            output.setKycSite(kyc.getKycData().getKycSite());
                                            output.setKycRiskIndustry(kyc.getKycData().getRiskIndustry());
                                        }

                                        return output;
                                    })))
                    .forEach(mergedResults::add);

            mapper.writerWithDefaultPrettyPrinter().writeValue(new File(properties.getOutputPath()), mergedResults);
            System.out.println("✅ Merged output written to: " + properties.getOutputPath());
            mergedResults.forEach(System.out::println);

        } catch (Exception e) {
            System.err.println("❌ Error during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedResults;
    }
}




@SpringBootApplication
@EnableConfigurationProperties({JsonFileProperties.class, ApiProperties.class})
public class JsonReaderApplication {
    public static void main(String[] args) {
        SpringApplication.run(JsonReaderApplication.class, args);
    }
}




package com.example.jsonreader.controller;

import com.example.jsonreader.model.MergedOutput;
import com.example.jsonreader.service.JsonReaderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class EntityController {

    private final JsonReaderService jsonReaderService;

    @Autowired
    public EntityController(JsonReaderService jsonReaderService) {
        this.jsonReaderService = jsonReaderService;
    }

    @GetMapping("/merged-data")
    public List<MergedOutput> getMergedData() {
        return jsonReaderService.mergeAndDisplayData();
    }
}



package com.example.jsonreader.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "json")
@Getter
@Setter
public class JsonFileProperties {

    private String outputPath; // Example: src/main/resources/merged_output.json
}



package com.example.jsonreader.config;

import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() throws Exception {
        TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;

        SSLContext sslContext = SSLContextBuilder
                .create()
                .loadTrustMaterial(null, acceptingTrustStrategy)
                .build();

        HttpClient httpClient = HttpClients.custom()
                .setSSLContext(sslContext)
                .build();

        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);

        return new RestTemplate(factory);
    }
}

