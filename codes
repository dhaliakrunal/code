package com.sunscreening.jsonreader.csv;

import com.sunscreening.jsonreader.model.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

@Component
@RequiredArgsConstructor
public class CsvReportGenerator {

    public void generateReport(List<MergedOutput> mergedData) throws IOException {
        try (FileWriter writer = new FileWriter("merged_report.csv")) {
            // Header
            writer.write("CRDS Code;BNPP Site;Site Country;Site Status;KYC Segment;Risk Industry;Registration Address;Registration Country\n");

            for (MergedOutput item : mergedData) {
                String crdsCode = item.getIdentifiers() != null && !item.getIdentifiers().isEmpty()
                        ? item.getIdentifiers().get(0).getCrdsCode() : "";

                String bnppSite = "";
                String siteCountry = "";
                String siteStatus = "";
                if (item.getKycSite() != null && !item.getKycSite().isEmpty()) {
                    KycSite site = item.getKycSite().get(0); // Get first site for report
                    bnppSite = site.getBnppSite() != null ? site.getBnppSite() : "";
                    siteCountry = site.getSiteCountry() != null ? site.getSiteCountry() : "";
                    siteStatus = site.getSiteStatus() != null ? site.getSiteStatus() : "";
                }

                String kycSegment = item.getKycSegment() != null ? item.getKycSegment() : "";

                String riskIndustry = item.getKycRiskIndustry() != null
                        ? item.getKycRiskIndustry().getCode() + "-" + item.getKycRiskIndustry().getDescription()
                        : "";

                String regAddress = "";
                String regCountry = "";
                if (item.getRegistrationAddress() != null) {
                    RegistrationAddress reg = item.getRegistrationAddress();
                    regAddress = String.join(" ",
                            reg.getLine1() != null ? reg.getLine1() : "",
                            reg.getLine2() != null ? reg.getLine2() : "",
                            reg.getCity() != null ? reg.getCity() : "",
                            reg.getState() != null ? reg.getState() : ""
                    ).trim();

                    regCountry = reg.getCountry() != null ? reg.getCountry() : "";
                }

                writer.write(String.format("%s;%s;%s;%s;%s;%s;%s;%s\n",
                        crdsCode, bnppSite, siteCountry, siteStatus,
                        kycSegment, riskIndustry, regAddress, regCountry));
            }
        }
    }
}



@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class EntityController {

    private final JsonReaderService jsonReaderService;
    private final CsvReportGenerator csvReportGenerator;

    @GetMapping("/download/csv")
    public ResponseEntity<String> downloadCsv() {
        List<MergedOutput> mergedData = jsonReaderService.mergeAndDisplayData();

        try {
            csvReportGenerator.generateReport(mergedData);
            return ResponseEntity.ok("✅ CSV report generated as 'merged_report.csv'");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("❌ Failed to generate CSV report: " + e.getMessage());
        }
    }
}


